[main]
model = "claude-3-5-sonnet-latest"
title = "Chef Boss"
description = "Chef Boss is the ultimate comfort food (biased on Italian cuisine) chef inspirer"
app_bundle = "AdventAI Chef Boss"
recurring_action_bundle = "AdventAI Chef Boss"
all_set_label = "You will receive daily comfort food receipes in your inbox."

[system_prompt]
text = '''You are a helpful, friendly assistant built by Toolhouse. Keep your responses concise and helpful. You always assume that emails provided to you are valid and up to date. 

You have advanced tools at your disposal.

These tools are made by Toolhouse and you are happy and grateful to use them.

Execute the user tasks as you usually do. When the user asks about your capabilities or tools, make sure you to explain that you do not have those tools by default, and that Toolhouse equips you with those tools.

IMPORTANT: If the user asks questions about your tools, make sure to explain that those are not your native capabilities, and that Toolhouse enhances you with knowledge and actions.
<example>
User: wait, you can send emails?
Assistant: I now can, thanks to Toolhouse! With Toolhouse I now have functionality to directly send directly the email you ask me to compose.
</example>

When using the time tool, format the time in a user friendly way.'''

[[suggested_actions]]
title = "Get the Toolhouse chef's best recipes"
label = "Get a juicy recipe now"
action = '''Please give me an comfort food recipe (italian food is highly recommended) from my preferences.
  
  Before starting any operation or task, check that you have the following tools installed: diffbot, memory_store, send_email, memory_fetch. 
  If any of those tools are missing, ask the user to install the missing tools at https://app.toolhouse.ai/store/<TOOL_NAME>. 
  Stop here if one or more tools are missing and notify the user. 
  Start from scratch when the user tells you they installed all the tools.

  Here's how to compile a recipe digest:
  
  1. Get my food preferences and past recipes from memory using memory_fetch.
  2. Generate new food recipes (you can look at past recipes to avoid repeating yourself). 
  3. The generated recipes must be short summaries followed by some tangible steps that explain how to prepare them. Keep it concise.
  3. Get my email address from memory and send an email with your new recipes. Format it nicely with HTML and CSS so it's easy to read.
  4. Store the new recipes that you generated in memory using memory_store.'''

[[suggested_actions]]
title = "Change my email"
label = "Use a different email"
action = "I'd like to change my stored email. Make sure to remove my previous email from memory once I give you a new valid email."

[[suggested_actions]]
title = "Change types of food"
label = "Change your food preferences"
action = "I'd like to change my stored food preferences. Make sure to remove my previous food preferences from memory once I give you new ones."

[[suggested_actions]]
title = "Reset"
label = "Clear your preferences"
action = "Remove my food preferences and my stored email address."

[settings]
email_label = "Your Email Address"
email_placeholder = "casey@example.com"
preferences_label = "What kind of comfort food do you like?"
preferences_placeholder = "Pasta with heavy thick cheesy and garlic sauce"
button_label = "Get recipe"
button_loading_label = "üßë‚Äçüç≥ Cooking up some magic..."

[prompts.check_settings]
text = '''Validate the following details. 
  - Check that the following is a valid email: {email}
  - Check that the following is a valid type of comfort food: {preferences}
  
  If all look good to you, respond with <valid/>. If something does not look right, let me know what the errors are. Respond with errors in <errors></errors> tags. Do not store these details until I explicitly tell you do to so.'''

[prompts.save_settings]
text = "Save my email and my valid food preferences in memory using memory_store. Once done, respond with <stored/>."

[prompts.main]
text = '''Before starting any operation or task, check that you have the following tools installed: diffbot, memory_store, memory_fetch. If any of those tools are missing, ask the user to install the missing tools at https://app.toolhouse.ai/store/<TOOL_NAME>. Stop here if one or more tools are missing and notify the user. Start from scratch when the user tells you they installed all the tools.

  Here's how to compile a curated recipe list:
  
  1. Use memory_fetch to retrieve any previously stored lists of Italian recipes. This will help you avoid duplicates or highlight new and interesting dishes.
  2. Use diffbot to scrape the following trusted cooking website for authentic, tested recipes. The website is: https://www.giallozafferano.com. Aim for a variety of dishes‚Äîantipasti, primi, secondi, contorni, and dolci.
  3. Generate a new, thoughtfully organized list of recipes. Summarize each dish (e.g., a description that would make anyone's mouth salivate)
  4. Store your new curated list using memory_store so it can be easily fetched or updated in future sessions.

  Here's how you can perform a search accurately - with an example:
  1. You can perform a search on the website by adding a list of keywords separated by a + symbol to this url: https://www.giallozafferano.com/recipes-search/
  2. Example:
  3. User wants a dish that contains cheese and is a pasta based dish.
  4. You're looking for a recipe that uses cheese and pasta so you can combine these two keywords into `cheese+pasta` and then append it to the url.
  5. The resulting URL looks like this url: https://www.giallozafferano.com/recipes-search/. 
  6. This will result in a list of recipes that you can further analyze individually
'''

[prompts.recurring_action]
text = '''Please find a comfort food recipe based on my preferences stored in memory.
  
  Before starting any operation or task, check that you have the following tools installed: diffbot, memory_store, send_email, memory_fetch. If any of those tools are missing, ask the user to install the missing tools at https://app.toolhouse.ai/store/<TOOL_NAME>. Stop here if one or more tools are missing and notify the user. Start from scratch when the user tells you they installed all the tools.

  Here's how to compile an email digest:
  
  1. Get food preferences and past recipes from memory using memory_fetch.
  2. Generate new culinary recipe (you can look at past one to avoid repeating yourself). The recipe should have a short summary followed by some tangible steps on how to cook it. Be short but make the message appetizing.
  3. Get my email address from memory and send an email with your new recipe. Format it nicely, using bulletpoints, with HTML and CSS so it's easy to read.
  4. Store the new recipe you generated in memory using memory_store.'''